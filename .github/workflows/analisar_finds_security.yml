name: Analyze GitHub Security Findings

on:
  push:
    branches: [main, Dev]
  pull_request:
    branches: [main, Dev]

permissions:
  contents: read
  security-events: read

jobs:
  analyze-findings:
    name: Analisar Findings de Seguran√ßa com TinyLlama
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Remover vers√µes conflitantes do Docker
        run: |
          sudo apt-get remove --purge containerd containerd.io || true
          sudo apt-get update

      - name: Instalar Docker e Docker Compose
        run: |
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Configurar Docker
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image (caso necess√°rio)
        run: docker-compose -f docker-compose.yml build

      - name: Iniciar Containers
        run: |
          docker-compose -f docker-compose.yml up -d
          sudo docker exec ollama ollama pull tinyllama

      - name: Aguardar TinyLlama ficar dispon√≠vel
        run: |
          echo "‚è≥ Aguardando TinyLlama responder..."
          until curl -s http://localhost:11434/api/tags > /dev/null; do
            sleep 3
          done
          echo "‚úÖ TinyLlama dispon√≠vel."

      - name: Baixar findings de seguran√ßa
        run: |
          mkdir -p findings

          echo "üîç Baixando Code Scanning..."
          curl -s -H "Authorization: token ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/code-scanning/alerts \
            -o findings/code-scanning.json

          echo "üîê Baixando Secret Scanning..."
          curl -s -H "Authorization: token ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/secret-scanning/alerts \
            -o findings/secrets.json || echo "Erro ao baixar Secret Scanning"

          echo "üì¶ Baixando Dependabot..."
          curl -s -H "Authorization: token ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/dependabot/alerts \
            -o findings/dependabot.json || echo "Erro ao baixar Dependabot"

      - name: Analisar cada finding com TinyLlama
        run: |
          analyze_findings() {
            local type="$1"
            local file="findings/${type}.json"
            echo "üîé Analisando findings de ${type}..."

            if ! [ -s "$file" ]; then
              echo "‚ö†Ô∏è Arquivo vazio ou inexistente: $file"
              return
            fi

            count=$(jq length "$file")
            if [ "$count" -eq 0 ]; then
              echo "‚úÖ Nenhum finding de ${type} encontrado."
              return
            fi

            for i in $(seq 0 $(($count - 1))); do
              finding=$(jq ".[$i]" "$file")
              number=$(echo "$finding" | jq -r '.number')
              created_at=$(echo "$finding" | jq -r '.created_at')
              updated_at=$(echo "$finding" | jq -r '.updated_at')
              description=$(echo "$finding" | jq -r '.rule.description // "N/A"')
              severity=$(echo "$finding" | jq -r '.rule.severity // "N/A"')
              location_path=$(echo "$finding" | jq -r '.most_recent_instance.location.path // "N/A"')
              location_line=$(echo "$finding" | jq -r '.most_recent_instance.location.start_line // "N/A"')
              message_text=$(echo "$finding" | jq -r '.most_recent_instance.message.text // "N/A"')
              html_url=$(echo "$finding" | jq -r '.html_url // "N/A"')
              help_uri=$(echo "$finding" | jq -r '.rule.help_uri // "N/A"')

              formatted_prompt="Analisando vulnerabilidade encontrada no reposit√≥rio: ${{ github.repository }}

              - **ID do Finding**: $number
              - **Data de Cria√ß√£o**: $created_at
              - **Data de Atualiza√ß√£o**: $updated_at
              - **Descri√ß√£o do Finding**: $description
              - **Severidade**: $severity

              ### Localiza√ß√£o:
              - **Caminho**: $location_path
              - **Linha**: $location_line

              ### Mensagem Adicional:
              $message_text

              ### A√ß√£o Recomendada:
              1. Verifique se a vulnerabilidade corresponde √† descri√ß√£o.
              2. Realize a corre√ß√£o ou substitui√ß√£o de senhas expostas no c√≥digo.
              3. Consulte a documenta√ß√£o para mais informa√ß√µes: $help_uri

              ### Link para o finding no GitHub:
              $html_url"

              # Escapar o prompt corretamente usando jq
              json=$(jq -n --arg model "tinyllama" --arg prompt "$formatted_prompt" '{model: $model, stream: false, prompt: $prompt}')

              response=$(curl -s -X POST http://localhost:11434/api/generate \
                -H "Content-Type: application/json" \
                -d "$json")

              result=$(echo "$response" | jq -r '.response // .error')

              echo "üß† Resultado da IA: $result"
            done
          }

          analyze_findings "code-scanning"
          analyze_findings "secrets"
          analyze_findings "dependabot"

      - name: Parar ambiente TinyLlama
        run: docker stop ollama && docker rm ollama
