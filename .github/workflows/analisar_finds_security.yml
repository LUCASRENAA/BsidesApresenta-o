name: Analyze GitHub Security Findings

on:
  push:
    branches:
      - main
      - Dev
  pull_request:
    branches:
      - main
      - Dev

permissions:
  contents: read
  security-events: read

jobs:
  analyze-findings:
    name: Analisar Findings de Seguran√ßa com TinyLlama
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Remover vers√µes conflitantes do Docker
        run: |
          sudo apt-get remove --purge containerd containerd.io || true
          sudo apt-get update

      - name: Instalar Docker e Docker Compose
        run: |
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          sudo sh -c "echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable' > /etc/apt/sources.list.d/docker.list"
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Configurar Docker
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image (caso necess√°rio)
        run: |
          docker-compose -f docker-compose.yml build

      - name: Iniciar Containers
        run: |
          docker-compose -f docker-compose.yml up -d
          sudo docker exec ollama ollama pull tinyllama

      - name: Baixar findings de seguran√ßa
        run: |
          mkdir -p findings

          echo "üîç Baixando Code Scanning..."
          curl -s -H "Authorization: token ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/code-scanning/alerts \
            -o findings/code-scanning.json

          echo "Exibindo findings do Code Scanning..."
          cat findings/code-scanning.json

          echo "üîê Baixando Secret Scanning..."
          curl -s -H "Authorization: token ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/secret-scanning/alerts \
            -o findings/secrets.json || echo "Erro ao baixar Secret Scanning"

          echo "Exibindo findings do Secret Scanning..."
          cat findings/secrets.json

          echo "üì¶ Baixando Dependabot..."
          curl -s -H "Authorization: token ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/dependabot/alerts \
            -o findings/dependabot.json || echo "Erro ao baixar Dependabot"

          echo "Exibindo findings do Dependabot..."
          cat findings/dependabot.json

      - name: Analisar cada finding com TinyLlama
        run: |
          analyze_findings() {
          local type="$1"
          local file="findings/${type}.json"

          echo "üîé Analisando findings de ${type}..."
          count=$(jq length "$file")

          if [ "$count" -eq 0 ]; then
            echo "‚úÖ Nenhum finding de ${type} encontrado."
            return
          fi

          for i in $(seq 0 $(($count - 1))); do
            # Obter o finding atual
            # Supondo que o prompt seja passado como uma string JSON, mas com escape, podemos usar `jq` para "limpar" o JSON
            finding=$(echo "$finding" | jq -Rs .)  # Escapando a string JSON para um formato que jq entenda

            # Agora, com a string JSON limpa, podemos usar o jq diretamente:
            number=$(echo "$finding" | jq -r '.number')
            created_at=$(echo "$finding" | jq -r '.created_at')
            updated_at=$(echo "$finding" | jq -r '.updated_at')
            description=$(echo "$finding" | jq -r '.rule.description')
            severity=$(echo "$finding" | jq -r '.rule.severity')
            location_path=$(echo "$finding" | jq -r '.most_recent_instance.location.path')
            location_line=$(echo "$finding" | jq -r '.most_recent_instance.location.start_line')
            message_text=$(echo "$finding" | jq -r '.most_recent_instance.message.text')
            html_url=$(echo "$finding" | jq -r '.html_url')
            help_uri=$(echo "$finding" | jq -r '.rule.help_uri')

            # Exibir os valores para depura√ß√£o
            echo "ID do Finding: $number"
            echo "Criado em: $created_at"
            echo "Atualizado em: $updated_at"
            echo "Descri√ß√£o: $description"
            echo "Severidade: $severity"
            echo "Caminho: $location_path"
            echo "Linha: $location_line"
            echo "Mensagem: $message_text"
            echo "Link do finding: $html_url"
            echo "Help URI: $help_uri"

            # Criar o texto formatado para enviar ao modelo
            formatted_prompt="Analisando vulnerabilidade encontrada no reposit√≥rio: BsidesApresenta-o

            - **ID do Finding**: $number
            - **Data de Cria√ß√£o**: $created_at
            - **Data de Atualiza√ß√£o**: $updated_at
            - **Descri√ß√£o do Finding**: $description
            - **Severidade**: $severity

            ### Localiza√ß√£o:
            - **Caminho**: $location_path
            - **Linha**: $location_line

            ### Mensagem Adicional:
            $message_text

            ### A√ß√£o Recomendada:
            1. Verifique se a vulnerabilidade corresponde √† descri√ß√£o.
            2. Realize a corre√ß√£o ou substitui√ß√£o de senhas expostas no c√≥digo.
            3. Consulte a documenta√ß√£o para mais informa√ß√µes: $help_uri

            ### Link para o finding no GitHub:
            $html_url
            "

            # Enviar para a API do TinyLlama
            response=$(curl -s -X POST http://localhost:11434/api/generate \
              -H "Content-Type: application/json" \
              -d "{\"model\": \"tinyllama\", \"stream\": false, \"prompt\": \"$formatted_prompt\"}")

            # Verificar se a resposta tem o campo 'response'
            result=$(echo "$response" | jq -r '.response // .error')

            if [ "$result" == "null" ]; then
              echo "‚ö†Ô∏è Erro na resposta da IA: $response"
            else
              echo "üß† Resultado da IA: $result"
            fi




            done
            }
          # Chamada da fun√ß√£o para an√°lise dos findings
          analyze_findings "code-scanning"
          analyze_findings "secrets"
          analyze_findings "dependabot"




      - name: Parar ambiente TinyLlama
        run: |
            docker stop ollama && docker rm ollama
